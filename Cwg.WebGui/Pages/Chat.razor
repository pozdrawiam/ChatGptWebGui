@page "/Chat"

@using Cwg.Core.Dto
@using Cwg.Core.Services

@inject IChatService ChatService
@inject IChatDbService ChatDb
@inject ISettingsService Settings

<PageTitle>Chat</PageTitle>

<NavLink href="/Settings">Settings</NavLink>

<h3>Chats</h3>

<ul>
    @foreach (ChatInfo chat in _chats)
    {
        <li>
            @if (chat == _editingChat)
            {
                <input type="text" @bind="chat.Title"/>
                <button type="button" @onclick="async () => await OnSaveChatTitleClickAsync(chat)">Save</button>
                <button type="button" @onclick="OnCancelEditClick">Cancel</button>
            }
            else
            {
                @chat.Title
                <button type="button" @onclick="async () => await OnSelectChatClickAsync(chat)">Select</button>
                <button type="button" @onclick="() => OnEditChatClick(chat)">Edit</button>
                <button type="button" @onclick="async () => await OnDeleteChatClickAsync(chat)">Delete</button>
            }
        </li>
    }
</ul>

<button type="button" @onclick="async () => await OnNewChatClickAsync()">New chat</button>

<h3>Current chat</h3>

@if (_currentChat != null && _chatSession != null)
{
    <p>Current chat: @_currentChat.Title</p>

    <ul>
        @foreach (var msg in _chatSession.Messages
                      .Where(x => x.Type == ChatMessageType.Assistant || x.Type == ChatMessageType.User))
        {
            <li>
                @if (msg.Type == ChatMessageType.Assistant)
                {
                    <text>Assistant:</text>
                }
                else if (msg.Type == ChatMessageType.User)
                {
                    <text>User:</text>
                }
                <p>@msg.Message</p>
            </li>
        }
        
        @if (_loading)
        {
            <text>Assistant:</text>
            <li>
                <p>Loading...</p>
            </li>
        }
    </ul>

    <textarea @bind="_message"></textarea>
    <br>
    <button type="button" @onclick="async () => await OnSendAsync()">Send</button>
}
else
{
    <p>Select or create chat.</p>
}

@code {
    List<ChatInfo> _chats = [];
    ChatSessionDto? _chatSession;

    ChatInfo? _currentChat;
    ChatInfo? _editingChat;

    bool _loading;
    
    string _message = "";

    SettingsDto _settings = new();

    protected override async Task OnInitializedAsync()
    {
        _settings = await Settings.GetAsync();
        
        if (!string.IsNullOrEmpty(_settings.ApiKey))
            ChatService.Initialize(_settings.ApiKey);
        
        _chats = (await ChatDb.GetChatsAsync()).ToList();
    }

    private async Task OnNewChatClickAsync()
    {
        var newChat = new ChatInfo();
        var newSession = new ChatSessionDto();
        
        newSession.Messages.Add(new ChatMessageDto
        {
            Message = _settings.SystemMessage,
            Type = ChatMessageType.System
        });

        await ChatDb.AddChatAsync(newChat);

        _chats.Add(newChat);
        _currentChat = newChat;
        _chatSession = newSession;
    }

    private async Task OnDeleteChatClickAsync(ChatInfo chat)
    {
        await ChatDb.DeleteChatAsync(chat.Id);

        if (chat == _currentChat)
            _currentChat = null;

        _chats.Remove(chat);
    }

    private void OnEditChatClick(ChatInfo chat)
    {
        _editingChat = chat;
    }

    private void OnCancelEditClick()
    {
        _editingChat = null;
    }

    private async Task OnSaveChatTitleClickAsync(ChatInfo chat)
    {
        _editingChat = null;
        await ChatDb.UpdateChatAsync(chat);
    }

    private async Task OnSelectChatClickAsync(ChatInfo chat)
    {
        _currentChat = chat;
        _chatSession = await ChatDb.GetChatSessionAsync(chat.Id);
    }

    private async Task OnSendAsync()
    {
        if (_loading || _chatSession == null)
            return;

        _loading = true;
        
        _chatSession.Messages.Add(new ChatMessageDto
        {
            Message = _message,
            Type = ChatMessageType.User
        });

        _message = "";

        try
        {
            await ChatService.CompleteChatAsync(_chatSession);

            if (_currentChat != null)
                await ChatDb.UpdateChatSessionAsync(_currentChat.Id, _chatSession);
        }
        finally
        {
            _loading = false;
        }
    }

}
